// app/assets/stylesheets/base/_mixins.scss

@use "sass:math";
@use "sass:map";
@use "sass:color";
@use "sass:list";
@use "variables" as v;

/**
 * VerseCraft Design System Mixins
 * Core styling patterns and utilities
 */

// ---------------------------------------------------------------
// Typography Mixins
// ---------------------------------------------------------------

/// Core typography styles
/// @param {String} $size - Font size from type scale
/// @param {Number} $weight [400] - Font weight
/// @param {String} $height [base] - Line height
/// @param {String} $family [primary] - Font family
@mixin font-style($size: 'base', $weight: 400, $height: 'base', $family: 'primary') {
  font-family: map.get(map.get(v.$fonts, $family), 'family');
  font-size: map.get(v.$type-scale, $size);
  line-height: map.get(v.$line-heights, $height);
  font-weight: $weight;
}

/// Poetry-specific typography
@mixin poetry-text($size: 'lg') {
  @include font-style($size, 400, 'verse', 'primary');
  white-space: pre-line;
  margin: map.get(v.$spacing, '6') 0;

  &::first-line {
    font-style: italic;
    letter-spacing: map.get(v.$letter-spacing, 'wide');
  }
}

/// Meta text styling
@mixin meta-text {
  @include font-style('xs', 400, 'base', 'secondary');
  color: map.get(map.get(v.$colors, 'ink'), 'light');
  letter-spacing: map.get(v.$letter-spacing, 'wide');
}

/// Truncate text with ellipsis
@mixin truncate($lines: 1) {
  @if $lines == 1 {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

// ---------------------------------------------------------------
// Layout Mixins
// ---------------------------------------------------------------

/// Container with responsive padding
@mixin container($size: 'default') {
  width: 100%;
  max-width: map.get(v.$content-width, $size);
  margin-left: auto;
  margin-right: auto;
  padding-left: map.get(v.$spacing, '4');
  padding-right: map.get(v.$spacing, '4');
}

/// Flexbox utilities
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

/// Grid utilities
@mixin grid($columns: 1, $gap: '4') {
  display: grid;
  grid-template-columns: repeat($columns, minmax(0, 1fr));
  gap: map.get(v.$spacing, $gap);
}

/// Center content absolutely
@mixin center-absolute {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// ---------------------------------------------------------------
// Interactive Mixins
// ---------------------------------------------------------------

/// Elevation with hover effect
@mixin elevation($level: 'sm', $hover: true) {
  box-shadow: map.get(v.$shadows, $level);
  transition: box-shadow map.get(v.$durations, 'quick') map.get(v.$easings, 'standard'),
  transform map.get(v.$durations, 'quick') map.get(v.$easings, 'standard');

  @if $hover {
    &:hover {
      box-shadow: map.get(v.$shadows, 'md');
      transform: translateY(-2px);
    }
  }
}

/// Focus ring styles
@mixin focus-ring($offset: true) {
  &:focus {
    outline: none;
  }

  &:focus-visible {
    outline: 2px solid map.get(map.get(v.$colors, 'accent'), 'base');
    outline-offset: if($offset, 2px, 0);
  }
}

/// Interactive state transitions
@mixin interactive($scale: true) {
  transition: all map.get(v.$durations, 'quick') map.get(v.$easings, 'standard');

  @if $scale {
    &:active {
      transform: scale(0.98);
    }
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

// ---------------------------------------------------------------
// Poetry Specific Mixins
// ---------------------------------------------------------------

/// Literary distinction styles
@mixin literary-distinction($level: 'emerging') {
  $distinction: map.get(v.$distinctions, $level);
  margin: map.get($distinction, 'spacing');
  font-style: map.get($distinction, 'style');
  transform: scale(map.get($distinction, 'scale'));
}

/// Verse layout
@mixin verse-layout {
  padding-left: map.get(v.$verse-metrics, 'indent');
  margin-bottom: map.get(v.$verse-metrics, 'stanza-spacing');
  position: relative;

  &::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 1px;
    background: map.get(map.get(v.$colors, 'ink'), 'lightest');
  }
}

// ---------------------------------------------------------------
// Social Feature Mixins
// ---------------------------------------------------------------

/// Appreciation animation
@mixin appreciation-animation {
  @keyframes appreciate {
    0% { transform: scale(1); }
    50% { transform: scale(map.get(v.$animation-scales, 'appreciation')); }
    100% { transform: scale(1); }
  }

  &.appreciating {
    animation: appreciate map.get(v.$durations, 'quick') map.get(v.$easings, 'out');
  }
}

/// Infinite scroll trigger
@mixin scroll-trigger {
  position: relative;

  &::after {
    content: '';
    position: absolute;
    bottom: map.get(v.$spacing, '4');
    left: 0;
    right: 0;
    height: 2px;
    background: map.get(map.get(v.$colors, 'accent'), 'lightest');
    transform: scaleX(0);
    transition: transform map.get(v.$durations, 'natural') map.get(v.$easings, 'out');
  }

  &.loading::after {
    transform: scaleX(1);
  }
}

// ---------------------------------------------------------------
// Responsive Mixins
// ---------------------------------------------------------------

/// Media query generator
@mixin breakpoint($size) {
  @media (min-width: map.get(v.$breakpoints, $size)) {
    @content;
  }
}

/// Responsive hiding
@mixin hide-until($size) {
  @media (max-width: map.get(v.$breakpoints, $size) - 1px) {
    display: none;
  }
}

// ---------------------------------------------------------------
// Print Mixins
// ---------------------------------------------------------------

/// Print-specific styles
@mixin print-styles {
  @media print {
    @content;
  }
}

/// Poetry print layout
@mixin print-poetry {
  @include print-styles {
    page-break-inside: avoid;
    margin: map.get(v.$spacing, '6') 0;
    font-size: 11pt;
    line-height: map.get(v.$line-heights, 'loose');
  }
}

// ---------------------------------------------------------------
// Accessibility Mixins
// ---------------------------------------------------------------

/// Visually hidden but accessible to screen readers
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/// Reduced motion styles
@mixin reduced-motion {
  @media (prefers-reduced-motion: reduce) {
    @content;
  }
}
// ---------------------------------------------------------------
// VerseCraft Foundation
// ---------------------------------------------------------------
// Core utility functions and helpers for the VerseCraft design system.
// Each function here is crafted to enhance typographic precision,
// color harmony, and literary-inspired layout. Together, these
// functions support a seamless and refined user experience across
// all themes and styles.
// ---------------------------------------------------------------

@use "sass:math";
@use "sass:map";
@use "sass:color";
@use "sass:list";
@use "sass:string";
@use "variables" as v;

// ---------------------------------------------------------------
// Typography Functions
// ---------------------------------------------------------------

/// Retrieve a font family stack for a given typeface
/// @param {String} $family - Typeface key
/// @return {List} Complete font stack
@function font($family) {
  @return map.get(map.get(v.$fonts, $family), 'family');
}

/// Fetch a semantic color, optionally with transparency
/// @param {String} $name - Semantic color name
/// @param {Number} $alpha [1] - Transparency level
/// @return {Color} Refined color value
@function semantic-color($name, $alpha: 1) {
  $color: map.get(v.$semantic-colors, $name);
  @if $alpha == 1 {
    @return $color;
  }
  @return rgba($color, $alpha);
}

/// Obtain a font size based on typographic scale
/// @param {String} $size - Size key from type scale
/// @return {Number} Font size in rem
@function font-size($size) {
  @return map.get(v.$type-scale, $size);
}

/// Retrieve a line height for balanced text flow
/// @param {String} $height - Line height key
/// @return {Number} Line height value
@function line-height($height) {
  @return map.get(v.$line-heights, $height);
}

/// Access letter spacing for typographic refinement
/// @param {String} $spacing - Letter spacing key
/// @return {String} Letter spacing value
@function letter-spacing($spacing) {
  @return map.get(v.$letter-spacing, $spacing);
}

// ---------------------------------------------------------------
// Color Functions
// ---------------------------------------------------------------

/// Select a color from the VerseCraft palette
/// @param {String} $palette - Palette name
/// @param {String} $tone [base] - Tone within the palette
/// @return {Color} Harmonized color value
@function color($palette, $tone: 'base') {
  @return map.get(map.get(v.$colors, $palette), $tone);
}

/// Create a color with an added transparency effect
/// @param {String} $palette - Color palette name
/// @param {String} $tone [base] - Color tone
/// @param {Number} $alpha - Transparency level
/// @return {Color} Color with transparency
@function color-alpha($palette, $tone: 'base', $alpha) {
  $color: color($palette, $tone);
  @return rgba($color, $alpha);
}

// ---------------------------------------------------------------
// Spacing Functions
// ---------------------------------------------------------------

/// Retrieve a spacing value, scaling harmoniously
/// @param {String|Number} $size - Key or pixel value
/// @return {Number} Spacing in px or rem
@function spacing($size) {
  @if type-of($size) == 'number' {
    @return $size * 1px;
  }
  @return map.get(v.$spacing, $size);
}

/// Compute relative spacing for poetic alignment
/// @param {Number} $multiplier - Multiplier for base spacing
/// @return {Number} Scaled spacing value
@function rel-spacing($multiplier) {
  $base: map.get(v.$spacing, '4');
  @return $base * $multiplier;
}

// ---------------------------------------------------------------
// Layout Functions
// ---------------------------------------------------------------

/// Define breakpoints for responsive design
/// @param {String} $breakpoint - Breakpoint key
/// @return {Number} Pixel value for breakpoint
@function breakpoint($breakpoint) {
  @return map.get(v.$breakpoints, $breakpoint);
}

/// Retrieve z-index for layered depth in content
/// @param {String} $layer - Layer key
/// @return {Number} Z-index level
@function z-index($layer) {
  @return map.get(v.$z-layers, $layer);
}

/// Get content width for structural clarity
/// @param {String} $size - Width key
/// @return {String|Number} Width value in rem
@function content-width($size) {
  @return map.get(v.$content-width, $size);
}

// ---------------------------------------------------------------
// Animation Functions
// ---------------------------------------------------------------

/// Retrieve animation duration, creating seamless transitions
/// @param {String} $duration - Duration key
/// @return {Number} Duration in ms
@function duration($duration) {
  @return map.get(v.$durations, $duration);
}

/// Obtain easing function for fluid motion
/// @param {String} $easing - Easing key
/// @return {String} Bezier curve value
@function easing($easing) {
  @return map.get(v.$easings, $easing);
}

/// Scale animations for dynamic visual effects
/// @param {String} $animation - Animation name
/// @return {Number} Scale factor
@function animation-scale($animation) {
  @return map.get(v.$animation-scales, $animation);
}

// ---------------------------------------------------------------
// Effect Functions
// ---------------------------------------------------------------

/// Access shadow for dimensional hierarchy
/// @param {String} $level - Shadow intensity level
/// @return {List} Shadow properties
@function shadow($level) {
  @return map.get(v.$shadows, $level);
}

/// Define border radius for refined corners
/// @param {String} $size - Radius size key
/// @return {Number} Radius value in px
@function radius($size) {
  @return map.get(map.get(v.$borders, 'radius'), $size);
}

/// Specify border width for balanced framing
/// @param {String} $size - Border width key
/// @return {Number} Border width in px
@function border-width($size) {
  @return map.get(map.get(v.$borders, 'width'), $size);
}

// ---------------------------------------------------------------
// Poetry-Specific Functions
// ---------------------------------------------------------------

/// Retrieve literary distinction level for text emphasis
/// @param {String} $level - Distinction level
/// @param {String} $property - Property of the distinction
/// @return {*} Value of distinction property
@function distinction($level, $property) {
  $distinction: map.get(v.$distinctions, $level);
  @return map.get($distinction, $property);
}

/// Access verse metric for poetic line spacing
/// @param {String} $metric - Metric key
/// @return {Number} Metric value in rem
@function verse-metric($metric) {
  @return map.get(v.$verse-metrics, $metric);
}

// ---------------------------------------------------------------
// State & Feature Functions
// ---------------------------------------------------------------

/// Determine if a feature is active in the design system
/// @param {String} $feature - Feature name
/// @return {Boolean} Feature status
@function feature-enabled($feature) {
  @return map.get(v.$enable-features, $feature);
}

/// Retrieve interaction thresholds for responsive design
/// @param {String} $interaction - Interaction type
/// @return {Number} Threshold in pixels
@function interaction-threshold($interaction) {
  @return map.get(v.$interaction-thresholds, $interaction);
}

// ---------------------------------------------------------------
// Unit Conversion Functions
// ---------------------------------------------------------------

/// Convert pixel values to rems for flexible scaling
/// @param {Number} $px - Pixel value
/// @return {Number} Value in rem
@function px-to-rem($px) {
  @return math.div($px, 16) * 1rem;
}

/// Convert rems to pixels for precise layout control
/// @param {Number} $rem - Rem value
/// @return {Number} Equivalent in px
@function rem-to-px($rem) {
  @return $rem * 16px;
}

// ---------------------------------------------------------------
// String Functions
// ---------------------------------------------------------------

/// Create a class name with modifier, enhancing BEM structure
/// @param {String} $base - Base class name
/// @param {String} $modifier - Modifier suffix
/// @return {String} Constructed class name
@function class-name($base, $modifier) {
  @return '#{$base}--#{$modifier}';
}

/// Generate a data attribute selector for state-based styling
/// @param {String} $name - Attribute name
/// @param {String} $value - Attribute value
/// @return {String} Data attribute selector
@function data-attr($name, $value: '') {
  @if $value == '' {
    @return '[data-#{$name}]';
  }
  @return '[data-#{$name}="#{$value}"]';
}
